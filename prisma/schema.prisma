generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Discount {
  id          Int           @id @unique(map: "sqlite_autoindex_Discount_1") @default(autoincrement())
  name        String
  format      String
  scope       String
  type        String
  value       Int
  amount      Int?
  available   Boolean
  startAt     DateTime
  endAt       DateTime
  productId   Int?
  sellerId    Int
  User        User          @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product     Product?      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Order       Order[]
  User_Coupon User_Coupon[]
}

model Order {
  id                        Int          @id @unique(map: "sqlite_autoindex_Order_1") @default(autoincrement())
  buyerId                   Int
  sellerId                  Int
  totalPrice                Int
  createdAt                 DateTime
  updatedAt                 DateTime
  status                    String
  discountId                Int?
  Discount                  Discount?    @relation(fields: [discountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Order_sellerIdToUser User         @relation("Order_sellerIdToUser", fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Order_buyerIdToUser  User         @relation("Order_buyerIdToUser", fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Order_Item                Order_Item[]
}

model Order_Item {
  orderId     Int
  productId   Int
  variationId Int
  quantity    Int
  Variation   Variation @relation(fields: [variationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Product     Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Order       Order     @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([orderId, productId, variationId])
}

model Product {
  id          Int          @id @unique(map: "sqlite_autoindex_Product_1") @default(autoincrement())
  name        String
  description String
  picture     String
  price       Int
  available   Boolean
  startAt     DateTime
  endAt       DateTime
  sellerId    Int
  Discount    Discount[]
  Order_Item  Order_Item[]
  User        User         @relation(fields: [sellerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Variation   Variation[]
}

model User {
  id                         Int           @id @unique(map: "sqlite_autoindex_User_1") @default(autoincrement())
  email                      String        @unique(map: "sqlite_autoindex_User_2")
  password                   String
  name                       String
  phone                      String        @unique(map: "sqlite_autoindex_User_3")
  Discount                   Discount[]
  Order_Order_sellerIdToUser Order[]       @relation("Order_sellerIdToUser")
  Order_Order_buyerIdToUser  Order[]       @relation("Order_buyerIdToUser")
  Product                    Product[]
  User_Coupon                User_Coupon[]
}

model User_Coupon {
  userId     Int
  discountId Int
  isUsed     Boolean
  Discount   Discount @relation(fields: [discountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId, discountId])
}

model Variation {
  id         Int          @id @unique(map: "sqlite_autoindex_Variation_1") @default(autoincrement())
  productId  Int
  colorId    Int
  colorName  String
  sizeId     Int
  sizeName   String
  inventory  Int
  Order_Item Order_Item[]
  Product    Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
